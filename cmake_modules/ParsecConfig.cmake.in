set(PARSEC_VERSION @PARSEC_VERSION_MAJOR@.@PARSEC_VERSION_MINOR@.@PARSEC_VERSION_PATCH@)

@PACKAGE_INIT@

set_and_check(PARSEC_DIR "${PACKAGE_PREFIX_DIR}")
set_and_check(PARSEC_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIR@")
set_and_check(PARSEC_EXTRA_INCLUDE_DIRS "@PACKAGE_EXTRA_INCLUDE_INSTALL_DIR@")
set_and_check(PARSEC_SYSCONFIG_DIRS "@PACKAGE_SYSCONFIG_INSTALL_DIR@")
set_and_check(PARSEC_CONFIG_DIRS "@PACKAGE_CONFIG_INSTALL_DIR@")
set_and_check(PARSEC_LIBRARY_DIRS "@PACKAGE_LIB_INSTALL_DIR@")
set_and_check(PARSEC_BINARY_DIRS "@PACKAGE_RUNTIME_INSTALL_DIR@")

set(PARSEC_PTGPP_CFLAGS "")

# Pull the dependencies
list(APPEND CMAKE_PREFIX_PATH "${PARSEC_CONFIG_DIRS}/parsec")
list(APPEND CMAKE_MODULE_PATH "${PARSEC_CONFIG_DIRS}/parsec")

find_package(Threads)

if(@PARSEC_HAVE_HWLOC@)
  set_and_check(HWLOC_DIR "@HWLOC_DIR@")
endif(@PARSEC_HAVE_HWLOC@)

if(@PARSEC_HAVE_OTF2@)
  # Nothing exportable here, if this test succeed then PaRSEC supports OTF2 output.
endif(@PARSEC_HAVE_OTF2@)

if(@PARSEC_HAVE_PAPI@)
  set_and_check(PAPI_INCLUDE_DIR "@PAPI_INCLUDE_DIR@")
  set_and_check(PAPI_LIBRARY "@PAPI_LIBRARY@")
endif(@PARSEC_HAVE_PAPI@)

if(@PARSEC_DIST_WITH_MPI@)
  include(CheckCSourceCompiles)
  check_c_source_compiles("#include <mpi.h>
                             int main(int argc, char *argv[]) {
                               MPI_Init(&argc, &argv);
                               MPI_Barrier(MPI_COMM_WORLD);
                               MPI_Finalize();
                               return 0;
                             }" MPI_WORKS_WITH_WRAPPER)
  if( MPI_WORKS_WITH_WRAPPER )
    set(MPI_C_FOUND TRUE)
  else( MPI_WORKS_WITH_WRAPPER)
    find_package(MPI REQUIRED)
  endif( MPI_WORKS_WITH_WRAPPER)
endif(@PARSEC_DIST_WITH_MPI@)

if(@PARSEC_HAVE_CUDA@)
  find_package(CUDA)
  if(CUDA_FOUND)
    set(PARSEC_HAVE_CUDA 1)
  endif(CUDA_FOUND)
endif(@PARSEC_HAVE_CUDA@)

if(@PARSEC_PROF_TRACE@)
  # Nothing exportable here, if this test succeed then PaRSEC supports tracing
endif(@PARSEC_PROF_TRACE@)

# Pull the PaRSEC::<targets>
include(${CMAKE_CURRENT_LIST_DIR}/PaRSECTargets.cmake)
