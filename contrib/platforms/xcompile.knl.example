#
# This file is for a cross-compilation. 
#   configure --with-platform=xcompile.knl.example ...
#
# PaRSEC will be compiled on the head node, disarming the --host
# for the toolchain. All dependencies have to be compiled for the
# expected target architecture (${host}).
#

# $host and $arch set from --host option
# If host not set, set it
: ${host:=knl-Linux}
: ${arch:=${host%%-*}} # get the first piece
: ${system:=${host#*-}} # get all the rest

# Variables controlling the native tools build
: ${NATIVE_DIR:=$PWD/native}
: ${NATIVE_CC:=gcc}
: ${NATIVE_CFLAGS:=}
: ${NATIVE_CXX:=g++}
: ${NATIVE_CXXFLAGS:=}
: ${NATIVE_LDFLAGS:=}

# Variables controlling the cross-compile mode
with_cuda=no
with_hwloc=$HWLOC_knl_DIR # will cause an error if HWLOC not found by cmake
export CFLAGS+=" -march=$arch"

# Generate the cross-compiling file
TOOLCHAIN_FILE=$PWD/Toolchain-$host.cmake
cat << _EOF > $TOOLCHAIN_FILE
# this one is important
SET(CMAKE_SYSTEM_NAME $system)
SET(CMAKE_SYSTEM_PROCESSOR $arch)
# Runtime config tests wont work, force the results
SET( PARSEC_ATOMIC_USE_GCC_32_BUILTINS_EXITCODE 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)
SET( PARSEC_ATOMIC_USE_GCC_64_BUILTINS_EXITCODE 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)
SET( PARSEC_ATOMIC_USE_GCC_128_BUILTINS_EXITCODE 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)
_EOF

# Pass-in the toolchain file name in $1,
# and arbitrary options to send to the native cmake invocation thereafter
configure_native_toolchain "$TOOLCHAIN_FILE" "-DSUPPORT_CXX=OFF"
#build_native_toolchain

# Done with variable allocation, and toolchain compilation, let's have configure do the rest as usual now


