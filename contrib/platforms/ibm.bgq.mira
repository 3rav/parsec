#
# This file is for a cross-compilation. 
#   configure --with-platform=ibm.bgq.mira ...
#
# PaRSEC will be compiled on the head node, using the BG/Q 
# toolchain. All dependencies have to be compiled for the
# expected target architecture.
#

# Be paranoid about errors and abort asap 
set -e

# General variables
: ${HWLOC_DIR:=$HOME/parsec/mira.deps}
[ -d "$HWLOC_DIR" ] || echo "HWLOC_DIR='$HWLOC_DIR' does not point to a valid hwloc install. PaRSEC may use unoptimized schedulers." 1>&2

: ${TOOLCHAIN_DIR:=$PWD/native}
: ${COMPUTE_DIR:=$PWD}

cat << _EOF
#
# Preparing the compilation of the native tools.
#   Cross-compiling toolchain will be found in $TOOLCHAIN_DIR
#
_EOF

#
# First make the native build, so we can use the tools on the headnode
#
mkdir -p $TOOLCHAIN_DIR && cd $TOOLCHAIN_DIR
rm -rf CMakeCache.txt CMakeFiles

## Defaults for local native compilation
CC=${CC:="gcc"}
CXX=${CXX:="g++"}
FC=${FC:="gfortran"}
export CC CXX FC
 
MPI="-DPARSEC_DIST_WITH_MPI=OFF"
CUDA="-DPARSEC_GPU_WITH_CUDA=OFF"
HWLOC=""
OPTS="-DBUILD_TESTING=OFF -DBUILD_TOOLS=ON -DBUILD_PARSEC=ON -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN_DIR"

echo cmake -G "Unix Makefiles" ${MPI} ${CUDA} ${OPTS} ${HWLOC} ${PARSEC_TOOLCHAIN_OPTIONS} ${srcdir}
cmake -G "Unix Makefiles" ${MPI} ${CUDA} ${OPTS} ${HWLOC} ${PARSEC_TOOLCHAIN_OPTIONS} ${srcdir}
#
# Now let's compile the tools
#
cd tools && make install
cd -
cd parsec/interfaces/ptg && make install
cd -
# Done with the toolchain for the headnode


#
# Now let's move on with the second step, cross-compile for
# the compute node target
#
mkdir -p $COMPUTE_DIR && cd $COMPUTE_DIR
rm -rf CMakeCache.txt CMakeFiles

cat << _EOF
#
# Preparing the cross-compiling of the BlueGeneQ compute node part
#   Compute node libraries and tests will be found in $COMPUTE_DIR
#
_EOF

#
# Generate the cross-compiling file
#
# Based on the CMake documentation the first step is to convince
# cmake to use the following file:
# BlueGeneQ-static-*.cmake
#
# This can be done by setting 
# - CMAKE_SYSTEM_NAME to BlueGeneQ-static
#
cat << _EOF > Toolchain-ppc-BlueGeneQ.cmake
# this one is important
SET(CMAKE_SYSTEM_NAME BlueGeneQ-static)
SET(CMAKE_SYSTEM_PROCESSOR ppc64)
_EOF

## Defaults for BG/Q cross-compilation
CC=mpixlc_r
CXX=mpixlcxx_r
FC=mpixlf77_r
export CC CXX FC CFLAGS LDFLAGS
ENVVARS+=" CC=$CC CXX=$CXX FC=$FC CFLAGS=$CFLAGS LDFLAGS=$LDFLAGS"

with_cuda=no
with_mpi=yes
enable_static=yes
with_hwloc=${HWLOC_DIR}

TOOLCHAIN=" -DCMAKE_TOOLCHAIN_FILE=Toolchain-ppc-BlueGeneQ.cmake -DIMPORT_EXECUTABLES=$TOOLCHAIN_DIR/ImportExecutables.cmake"
CMAKE_DEFINES+=" -DBUILD_TOOLS=OFF $TOOLCHAIN"

# Done with variable allocation, and toolchain compilation, let's have configure do the rest as usual now

