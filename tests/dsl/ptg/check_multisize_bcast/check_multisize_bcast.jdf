extern "C" %{
/*
 * Copyright (c) 2018-2022 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 */
#include "parsec/data_distribution.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/data.h"
#include "parsec/utils/mca_param.h"
#include "parsec/arena.h"
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

%}

%option no_taskpool_instance = true  /* can be aything */

descA      [type = "struct parsec_tiled_matrix_dc_t *"]
NB         [type = int]
NT         [type = int]


/**************************************************
 *               potrf_dpotrf                     *
 **************************************************/
potrf_dpotrf(k) 

// Execution space
k = 0 .. descA->mt-1

// Parallel partitioning
:descA(k, k)

// Parameters
RW T <- (k == 0) ? descA(k, k) : A potrf_diag(k, k-1)
     -> T potrf_diag(k+1..descA->mt-1, k)
     -> T potrf_col(k+1..descA->mt-1..2, k) [layout = MPI_DOUBLE count = 2]
     -> T potrf_col(k+2..descA->mt-1..2, k) [layout = MPI_DOUBLE count = 3]
     -> descA(k, k)

BODY
{
printf("potrf %d\n", k);
}
END


/**************************************************
 *               potrf_col                        *
 **************************************************/
potrf_col(m, k) 

// Execution space
k = 0   .. descA->mt-2
m = k+1 .. descA->mt-1

// Parallel partitioning
: descA(m, k)

// Parameters
READ  T <- T potrf_dpotrf(k)
RW    C <- descA(m, k)
        -> descA(m, k)

BODY
{
  printf("col %d %d\n", m, k);
}
END


/**************************************************
 *               potrf_diag                       *
 **************************************************/
potrf_diag(k, i)

// Execution space
i = 0   .. descA->mt-2
k = i+1 .. descA->mt-1

// Parallel partitioning
: descA(k, k)

// Parameters
READ  T <- T potrf_dpotrf(i)
RW    A <- (i == 0)   ? descA(k, k)  : A potrf_diag(k, i-1)
        -> (k == i+1) ? T potrf_dpotrf(k) :  A potrf_diag(k, i+1)

BODY
{
    printf("diag %d, iteration %d\n", k, i);
}
END

